#!/bin/bash
#  vim: foldlevel=0:

# initililize fasd

if which fasd > /dev/null ; then
  # Use -->,<-- to complete in zsh
  # https://github.com/clvv/fasd#tab-completion
  eval "$(fasd --init auto)"
  [[ $(echo $0) =~ "bash" ]] && _fasd_bash_hook_cmd_complete v m j o
fi
[[ -f ~/.env.local ]] && source ~/.env.local

# git aliases

alias exa='exa -la --git'
alias less='less -R --follow-name'
alias gb='git branch'
alias gco='git checkout'
alias gcp='git cherry-pick'
alias gd='git difftool --dir-diff'
alias gdf='git diff'
alias gdc='git diff --cached'
alias gf='git fetch --all'
alias gl="git log --pretty=tformat:'%C(black)%G? %C(yellow)%h%C(auto)%d %C(blue)%ae%Creset %s %Cgreen(%ar, %cr)%Creset' --graph"
alias glds="git log -p --all -G" #git log diff search: search in diffs added and removed
alias gp="git push --set-upstream $GIT_UPSTREAM HEAD"
alias gpl='git pull --rebase' # git pull --rebase origin master
alias gri='git rebase --autosquash -i'
alias grhh='git reset HEAD --hard'
alias gs='git status -sb'
alias gsp='git stash pop'
alias gst='git stash'
alias gsu='git submodule update --init --recursive'
alias copy='rsync --archive --stats --progress --human-readable --compress'

# other aliases

alias ls='ls -F --color'
alias ll='ls -l'
alias la='ls -la'
alias grep="grep --color"
alias feh='feh -r --info "exiv2 %f" --auto-zoom --geometry 1280x960+320+60 -C /usr/share/fonts/TTF -e Ubuntu-R/35'
alias ft='find . -ipath "*.git" -prune -o -print| sed -e "s/[^-][^\/]*\//  |/g"'         # no git file tree  --more fileterd
alias j='fasd_cd -d'
alias n='ncmpcpp -S visualizer'
alias pro='sudo pacman -Rns $(pacman -Qtdq)'  # pac remove orphans
alias r='ranger'
alias ync='yaourt --noconfirm'
alias y='yaourt'
alias sor="status-of-repos"
alias led_networth='ledger -f $DOTFILES_LEDGER_FILE bal \^Assets \^Liabilities --cleared -B ; echo "*******" ; ledger -f $DOTFILES_LEDGER_FILE bal \^Funds --cleared -B'
alias led_permonthExp='ledger -f $DOTFILES_LEDGER_FILE -MAn reg \^Expenses \^Equity:Adjust'
alias led_expenseList='ledger -f $DOTFILES_LEDGER_FILE reg \^Expenses \^Equity:Adjust'
alias led_cashflow='ledger -f $DOTFILES_LEDGER_FILE -MAn reg \^Income \^Expenses \^Equity:Adjust'
alias led_check='ledger -f $DOTFILES_LEDGER_FILE b i:sav credit --flat'
alias led='ledger -f $DOTFILES_LEDGER_FILE'

# FUNCTIONS {{{


sanitize_file_name() {
  [[ -z $1 ]] && perl-rename -n "s/ |\(|\!|&|\)|'|\[|\]/_/g" *
  [[ -n $1 ]] && perl-rename "s/ |\(|\!|&|\)|'|\[|\]/_/g" *
}

ms() { # mpc search
  #mpc search
  # eg ms year:2000 path::Hindi
  # eg ms year:..1995 path::Hindi
  # mpc search filename "`echo $*| sed 's/ /_/g'`"
  # beet ls -f '$path' last_played:..2016-05 path::OS >! ~/.mpd/playlists/asd.m3u

  beet ls -f '$path' "$@" | sed 's#/home/murali/Dropbox/Songs/##'
}

mp() { #mpc play
  mpc clear > /dev/null
  # mpc search filename "`echo $*| sed 's/ /_/g'`" | mpc add
  beet ls -f '$path' "$@" | sed 's#/home/murali/Dropbox/Songs/##' | mpc add
  mpc play
}

msp() {
  ms "$@"
  echo "Press enter to play selection"
  read
  mp "$@"
}

least_played() {
  # Print the access time along with the file name
  # eg : to play songs played before 10 days
  # least_played -atime +10
  cd /home/murali/Dropbox/Songs/
  find -type f "${@}" -iname "*.mp3" -printf "\n%A@ %p" | \
    sort -nr | awk '{print $2}' | sed 's#./##' | sed '/^$/d' | mpc add
}

# database update
mu() {
  rm /var/tmp/musiclibrary.blb; beet import -A ~/Dropbox/Songs/ ;
  mpc update;
}

# time till
tt() {

  USAGE="
  Usage:
    tt tomorrow5am
    tt 2:37am

  Spaces require quotes:

    tt 'jan1 3:01am 2019'
    tt 'tomorrow 3am'
  "

  if [ $# -eq 0 ];
  then
    echo "$USAGE"
    return 1;
  fi

  reqInSec=$(date -d "$1" +%s)
  nowInSec=$(date +%s)
  format="%yy %mm %dd %Hh %Mmins"

  if [[ $reqInSec -gt $nowInSec ]]; then
    endTime=$(date -d "$1" -Is)
    startTime=$(date -Is)
    format="+ $format"
  else
    startTime=$(date -d "$1" -Is)
    endTime=$(date -Is)
    format="- $format"
  fi

  datediff "$startTime" "$endTime" -f "$format"
}

time_after() {
  # time after x hours
  # time_after +7hours30mins
  # time_after "1months 20days 23hours44minutes"
  date -d "$@"
}

stopwatch(){
  # urxvtc -geometry 20x1
  date1=$(date +%s);
   while true; do
    currentTime=$(date +%s)
    echo -ne "$(date -u --date @$((currentTime - $date1)) +%H:%M:%S)\r";
    sleep 0.5
   done
}

# simple calculator
function c() {
  noSpaceExpr=`echo $* | sed -e "s/ //g"`
  awk "BEGIN { print $noSpaceExpr }"
}
# alias it for zsh
if [[ $SHELL =~ "zsh" ]]; then alias c='noglob c'; fi

transfer() {
  if [ $# -eq 0 ];
  then
    echo "No arguments specified. Usage:\necho transfer /tmp/test.md\ncat /tmp/test.md | transfer test.md";
    return 1;
  fi
  tmpfile=$( mktemp -t transferXXX );
  if tty -s; then
    basefile=$(basename "$1" | sed -e 's/[^a-zA-Z0-9._-]/-/g');
    curl --progress-bar --upload-file "$1" "https://transfer.sh/$basefile" >> $tmpfile;
  else
    curl --progress-bar --upload-file "-" "https://transfer.sh/$1" >> $tmpfile ;
  fi;
  cat $tmpfile;
  rm -f $tmpfile;
}

cdown() {
  if [ $# -eq 0 ];
  then
    echo no arg specified
    echo "funciton <time in min> <beep freq in sec>"
    return 1
  fi
  date1=$((`date +%s` + $1*60));
  elapsed=0
  bells=0
  while [ "$date1" -ge $(date +%s) ]; do
    echo -ne "$(date -u --date @$(($date1 - $(date +%s) )) +%H:%M:%S)\b\b\b\b\b\b\b\b";
    sleep 1
    elapsed=$(( elapsed + 1))
    if [ "$elapsed" -eq $2 ]; then
      bells=$(( bells + 1))
      for i in $(seq 1 $bells);
      do
        paplay /usr/share/sounds/freedesktop/stereo/bell.oga
      done
      elapsed=0
    fi
  done
  paplay /usr/share/sounds/freedesktop/stereo/alarm-clock-elapsed.oga
}

timeGoogle() {
  sudo date -s "$(wget -S  "http://www.google.com/" 2>&1 | \
    grep -E '^[[:space:]]*[dD]ate:'                      | \
    sed 's/^[[:space:]]*[dD]ate:[[:space:]]*//'          | \
    head -1l                                             | \
    awk '{print $1, $3, $2,  $5 ,"GMT", $4 }'            | \
    sed 's/,//')"
}

list_custom_defined_functions() {
  #TODO
  if [[ $SHELL =~ "zsh" ]]; then
    # if zsh
    functions | grep -P "^[^_ \t][^ ]* *\(\)" | grep -vP "^(prompt_|is-)"
  else
    # if bash
    declare -F
  fi
}

# }}}

# LANG is required for applications like tmux to figure out that UTF8 is supported
export LANG=en_US.UTF-8
export VISUAL=/usr/bin/vim
export EDITOR=/usr/bin/vim
export BC_ENV_ARGS=~/.bcrc
export GOPATH=~/go
export FZF_DEFAULT_COMMAND='fd --type f'

for custom_path in   \
    $HOME/.jenv/bin  \
    $HOME/.cargo/bin \
    $GOPATH/bin      \
    $HOME/bin        \
    ; do
  [[ ":$PATH:" != *":$custom_path:"* ]] && export PATH="$custom_path:${PATH}"
done

if [[ $(uname -s) == "Darwin" ]] ; then
  for custom_path in                          \
      /usr/local/opt/grep/libexec/gnubin      \
      /usr/local/opt/coreutils/libexec/gnubin \
      /usr/local/opt/coreutils/libexec/gnuman \
      /usr/local/opt/findutils/libexec/gnubin \
      ; do
    [[ ":$PATH:" != *":$custom_path:"* ]] && export PATH="$custom_path:${PATH}"
  done
fi

# dircolors is availabe after path is updated
if which dircolors > /dev/null; then
  if [[ -s "$HOME/.dir_colors" ]]; then
    eval "$(dircolors --sh "$HOME/.dir_colors")"
  else
    eval "$(dircolors --sh)"
  fi
fi

gen_pass() {
  length=15
  gen_pwd=$(LC_ALL=C tr -dc '[:graph:]' < /dev/urandom | head -c $length)
  grep -P "(?=.*\d)(?=.*[a-zA-Z]).{15,}" <<< $gen_pwd
}

decimal_to_binary() {
  export D2B=({0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1}{0..1})
  echo "${D2B[$1]}"
  # leading zeros removed
  echo $(( ${D2B[$1]} ))
}
binary_to_decimal() {
  echo $((2#$1))
}

# create a tmux for the first teminal spawned 
attach_to_tmux() {
  export TMUX_SOCKET_NAME=${1:-default}
  export TMUX_SESSION_NAME=${2:-Main}
  if [ $(tmux -L $TMUX_SOCKET_NAME list-sessions 2> /dev/null | wc -l) -eq 0 ] ; then
    # if no tmux session in the machine , create  one and attach
    tmux -L $TMUX_SOCKET_NAME new-session -s "$TMUX_SESSION_NAME" -d ;
    tmux -L $TMUX_SOCKET_NAME attach;
  else
    # if a session is already there but not attached, then attach
    if [ $(tmux -L $TMUX_SOCKET_NAME list-clients | wc -l) -eq 0 ]; then
      tmux -L $TMUX_SOCKET_NAME attach;
    fi
    # else do nothing if alredy attached
  fi
  alias ta='tmux -L $TMUX_SOCKET_NAME attach'
  alias tad='tmux -L $TMUX_SOCKET_NAME attach -d'
}

sister_tmux_session() {
  tmux -L $TMUX_SOCKET_NAME new-session -t $TMUX_SESSION_NAME -s `date +%d%b` -d
}

# https://github.com/junegunn/fzf/wiki/Examples-(completion)#examples
_fzf_complete_pass() {
  _fzf_complete '+m' "$@" < <(
    pwdir=${PASSWORD_STORE_DIR-~/.password-store/}
    stringsize="${#pwdir}"
    find "$pwdir" -name "*.gpg" -print |
        cut -c "$((stringsize + 1))"-  |
        sed -e 's/\(.*\)\.gpg/\1/'
  )
}

update_freedesktop_menu() {
  xdg_menu --format awesome --root-menu /etc/xdg/menus/arch-applications.menu >~/.config/awesome/archmenu.lua
}

review_journal() {
  rg --pretty --sort path '\[ ]' -N   201{4,6,7,8,9}* | nl
}
